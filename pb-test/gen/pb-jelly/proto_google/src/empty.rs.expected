// @generated, do not edit
/// A generic empty message that you can re-use to avoid defining duplicated
/// empty messages in your APIs. A typical example is to use it as the request
/// or the response type of an API method. For instance:

///     service Foo {
///       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
///     }

/// The JSON representation for `Empty` is empty JSON object `{}`.
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct Empty {
}
impl ::std::default::Default for Empty {
  fn default() -> Self {
    Empty {
    }
  }
}
lazy_static! {
  pub static ref Empty_default: Empty = Empty::default();
}
impl ::pb_jelly::Message for Empty {
  const DESCRIPTOR: ::std::option::Option<::pb_jelly::MessageDescriptor> =  (
    Some(::pb_jelly::MessageDescriptor {
      name: "Empty",
      full_name: "google.protobuf.Empty",
      fields: &[
      ],
      oneofs: &[
      ],
    })
  );
  fn compute_size(&self) -> usize {
    0
  }
  fn compute_grpc_slices_size(&self) -> usize {
    0
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::Reflection for Empty {
  fn which_one_of(&self, oneof_name: &str) -> ::std::option::Option<&'static str> {
    match oneof_name {
      _ => {
        panic!("unknown oneof name given");
      }
    }
  }
  fn get_field_mut(&mut self, field_name: &str) -> ::pb_jelly::reflection::FieldMut<'_> {
    match field_name {
      _ => {
        panic!("unknown field name given")
      }
    }
  }
}

