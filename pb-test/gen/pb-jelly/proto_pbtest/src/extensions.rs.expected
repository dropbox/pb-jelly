// @generated, do not edit
#[derive(Clone, Debug, PartialEq)]
pub struct Msg {
  pub base_field: ::std::option::Option<i32>,
  pub _extensions: ::pb_jelly::Unrecognized,
}
impl Msg {
  pub fn has_base_field(&self) -> bool {
    self.base_field.is_some()
  }
  pub fn set_base_field(&mut self, v: i32) {
    self.base_field = Some(v);
  }
  pub fn get_base_field(&self) -> i32 {
    self.base_field.unwrap_or(0)
  }
}
impl ::std::default::Default for Msg {
  fn default() -> Self {
    Msg {
      base_field: ::std::default::Default::default(),
      _extensions: ::pb_jelly::Unrecognized::default(),
    }
  }
}
lazy_static! {
  pub static ref Msg_default: Msg = Msg::default();
}
impl ::pb_jelly::Message for Msg {
  fn descriptor(&self) -> ::std::option::Option<::pb_jelly::MessageDescriptor> {
    Some(::pb_jelly::MessageDescriptor {
      name: "Msg",
      full_name: "pbtest.Msg",
      fields: &[
        ::pb_jelly::FieldDescriptor {
          name: "base_field",
          full_name: "pbtest.Msg.base_field",
          index: 0,
          number: 250,
          typ: ::pb_jelly::wire_format::Type::Varint,
          label: ::pb_jelly::Label::Optional,
          oneof_index: None,
        },
      ],
      oneofs: &[
      ],
    })
  }
  fn compute_size(&self) -> usize {
    let mut size = 0;
    let mut base_field_size = 0;
    if let Some(ref val) = self.base_field {
      let l = ::pb_jelly::Message::compute_size(val);
      base_field_size += ::pb_jelly::wire_format::serialized_length(250);
      base_field_size += l;
    }
    size += base_field_size;
    size += self._extensions.compute_size();
    size
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    if let Some(ref val) = self.base_field {
      ::pb_jelly::wire_format::write(250, ::pb_jelly::wire_format::Type::Varint, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    self._extensions.serialize(w)?;
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        250 => {
          let val = ::pb_jelly::helpers::deserialize_known_length::<B, i32>(buf, typ, ::pb_jelly::wire_format::Type::Varint, "Msg", 250)?;
          self.base_field = Some(val);
        }
        100..=200 | 300..=536870911 => {
          self._extensions.gather(field_number, typ, &mut buf)?;
        }
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::Reflection for Msg {
  fn which_one_of(&self, oneof_name: &str) -> ::std::option::Option<&'static str> {
    match oneof_name {
      _ => {
        panic!("unknown oneof name given");
      }
    }
  }
  fn get_field_mut(&mut self, field_name: &str) -> ::pb_jelly::reflection::FieldMut<'_> {
    match field_name {
      "base_field" => {
        ::pb_jelly::reflection::FieldMut::Value(self.base_field.get_or_insert_with(::std::default::Default::default))
      }
      _ => {
        panic!("unknown field name given")
      }
    }
  }
}
impl ::pb_jelly::extensions::Extensible for Msg {
  fn _extensions(&self) -> &::pb_jelly::Unrecognized {
    &self._extensions
  }
}

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct FakeMsg {
  pub base_field: ::std::option::Option<i32>,
  pub singular_primitive: ::std::option::Option<i32>,
  pub singular_message: ::std::option::Option<super::pbtest3::ForeignMessage3>,
  pub repeated_primitive: ::std::vec::Vec<i32>,
  pub repeated_message: ::std::vec::Vec<super::pbtest3::ForeignMessage3>,
}
impl FakeMsg {
  pub fn has_base_field(&self) -> bool {
    self.base_field.is_some()
  }
  pub fn set_base_field(&mut self, v: i32) {
    self.base_field = Some(v);
  }
  pub fn get_base_field(&self) -> i32 {
    self.base_field.unwrap_or(0)
  }
  pub fn has_singular_primitive(&self) -> bool {
    self.singular_primitive.is_some()
  }
  pub fn set_singular_primitive(&mut self, v: i32) {
    self.singular_primitive = Some(v);
  }
  pub fn get_singular_primitive(&self) -> i32 {
    self.singular_primitive.unwrap_or(0)
  }
  pub fn has_singular_message(&self) -> bool {
    self.singular_message.is_some()
  }
  pub fn set_singular_message(&mut self, v: super::pbtest3::ForeignMessage3) {
    self.singular_message = Some(v);
  }
  pub fn take_singular_message(&mut self) -> super::pbtest3::ForeignMessage3 {
    self.singular_message.take().unwrap_or_default()
  }
  pub fn get_singular_message(&self) -> &super::pbtest3::ForeignMessage3 {
    self.singular_message.as_ref().unwrap_or(&super::pbtest3::ForeignMessage3_default)
  }
  pub fn set_repeated_primitive(&mut self, v: ::std::vec::Vec<i32>) {
    self.repeated_primitive = v;
  }
  pub fn take_repeated_primitive(&mut self) -> ::std::vec::Vec<i32> {
    ::std::mem::take(&mut self.repeated_primitive)
  }
  pub fn get_repeated_primitive(&self) -> &[i32] {
    &self.repeated_primitive
  }
  pub fn mut_repeated_primitive(&mut self) -> &mut ::std::vec::Vec<i32> {
    &mut self.repeated_primitive
  }
  pub fn set_repeated_message(&mut self, v: ::std::vec::Vec<super::pbtest3::ForeignMessage3>) {
    self.repeated_message = v;
  }
  pub fn take_repeated_message(&mut self) -> ::std::vec::Vec<super::pbtest3::ForeignMessage3> {
    ::std::mem::take(&mut self.repeated_message)
  }
  pub fn get_repeated_message(&self) -> &[super::pbtest3::ForeignMessage3] {
    &self.repeated_message
  }
  pub fn mut_repeated_message(&mut self) -> &mut ::std::vec::Vec<super::pbtest3::ForeignMessage3> {
    &mut self.repeated_message
  }
}
impl ::std::default::Default for FakeMsg {
  fn default() -> Self {
    FakeMsg {
      base_field: ::std::default::Default::default(),
      singular_primitive: ::std::default::Default::default(),
      singular_message: ::std::default::Default::default(),
      repeated_primitive: ::std::default::Default::default(),
      repeated_message: ::std::default::Default::default(),
    }
  }
}
lazy_static! {
  pub static ref FakeMsg_default: FakeMsg = FakeMsg::default();
}
impl ::pb_jelly::Message for FakeMsg {
  fn descriptor(&self) -> ::std::option::Option<::pb_jelly::MessageDescriptor> {
    Some(::pb_jelly::MessageDescriptor {
      name: "FakeMsg",
      full_name: "pbtest.FakeMsg",
      fields: &[
        ::pb_jelly::FieldDescriptor {
          name: "base_field",
          full_name: "pbtest.FakeMsg.base_field",
          index: 0,
          number: 250,
          typ: ::pb_jelly::wire_format::Type::Varint,
          label: ::pb_jelly::Label::Optional,
          oneof_index: None,
        },
        ::pb_jelly::FieldDescriptor {
          name: "singular_primitive",
          full_name: "pbtest.FakeMsg.singular_primitive",
          index: 1,
          number: 101,
          typ: ::pb_jelly::wire_format::Type::Varint,
          label: ::pb_jelly::Label::Optional,
          oneof_index: None,
        },
        ::pb_jelly::FieldDescriptor {
          name: "singular_message",
          full_name: "pbtest.FakeMsg.singular_message",
          index: 2,
          number: 301,
          typ: ::pb_jelly::wire_format::Type::LengthDelimited,
          label: ::pb_jelly::Label::Optional,
          oneof_index: None,
        },
        ::pb_jelly::FieldDescriptor {
          name: "repeated_primitive",
          full_name: "pbtest.FakeMsg.repeated_primitive",
          index: 3,
          number: 300,
          typ: ::pb_jelly::wire_format::Type::Varint,
          label: ::pb_jelly::Label::Repeated,
          oneof_index: None,
        },
        ::pb_jelly::FieldDescriptor {
          name: "repeated_message",
          full_name: "pbtest.FakeMsg.repeated_message",
          index: 4,
          number: 200,
          typ: ::pb_jelly::wire_format::Type::LengthDelimited,
          label: ::pb_jelly::Label::Repeated,
          oneof_index: None,
        },
      ],
      oneofs: &[
      ],
    })
  }
  fn compute_size(&self) -> usize {
    let mut size = 0;
    let mut base_field_size = 0;
    if let Some(ref val) = self.base_field {
      let l = ::pb_jelly::Message::compute_size(val);
      base_field_size += ::pb_jelly::wire_format::serialized_length(250);
      base_field_size += l;
    }
    size += base_field_size;
    let mut singular_primitive_size = 0;
    if let Some(ref val) = self.singular_primitive {
      let l = ::pb_jelly::Message::compute_size(val);
      singular_primitive_size += ::pb_jelly::wire_format::serialized_length(101);
      singular_primitive_size += l;
    }
    size += singular_primitive_size;
    let mut singular_message_size = 0;
    if let Some(ref val) = self.singular_message {
      let l = ::pb_jelly::Message::compute_size(val);
      singular_message_size += ::pb_jelly::wire_format::serialized_length(301);
      singular_message_size += ::pb_jelly::varint::serialized_length(l as u64);
      singular_message_size += l;
    }
    size += singular_message_size;
    let mut repeated_primitive_size = 0;
    for val in &self.repeated_primitive {
      let l = ::pb_jelly::Message::compute_size(val);
      repeated_primitive_size += ::pb_jelly::wire_format::serialized_length(300);
      repeated_primitive_size += l;
    }
    size += repeated_primitive_size;
    let mut repeated_message_size = 0;
    for val in &self.repeated_message {
      let l = ::pb_jelly::Message::compute_size(val);
      repeated_message_size += ::pb_jelly::wire_format::serialized_length(200);
      repeated_message_size += ::pb_jelly::varint::serialized_length(l as u64);
      repeated_message_size += l;
    }
    size += repeated_message_size;
    size
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    if let Some(ref val) = self.singular_primitive {
      ::pb_jelly::wire_format::write(101, ::pb_jelly::wire_format::Type::Varint, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    for val in &self.repeated_message {
      ::pb_jelly::wire_format::write(200, ::pb_jelly::wire_format::Type::LengthDelimited, w)?;
      let l = ::pb_jelly::Message::compute_size(val);
      ::pb_jelly::varint::write(l as u64, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    if let Some(ref val) = self.base_field {
      ::pb_jelly::wire_format::write(250, ::pb_jelly::wire_format::Type::Varint, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    for val in &self.repeated_primitive {
      ::pb_jelly::wire_format::write(300, ::pb_jelly::wire_format::Type::Varint, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    if let Some(ref val) = self.singular_message {
      ::pb_jelly::wire_format::write(301, ::pb_jelly::wire_format::Type::LengthDelimited, w)?;
      let l = ::pb_jelly::Message::compute_size(val);
      ::pb_jelly::varint::write(l as u64, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        250 => {
          let val = ::pb_jelly::helpers::deserialize_known_length::<B, i32>(buf, typ, ::pb_jelly::wire_format::Type::Varint, "FakeMsg", 250)?;
          self.base_field = Some(val);
        }
        101 => {
          let val = ::pb_jelly::helpers::deserialize_known_length::<B, i32>(buf, typ, ::pb_jelly::wire_format::Type::Varint, "FakeMsg", 101)?;
          self.singular_primitive = Some(val);
        }
        301 => {
          let val = ::pb_jelly::helpers::deserialize_length_delimited::<B, super::pbtest3::ForeignMessage3>(buf, typ, "FakeMsg", 301)?;
          self.singular_message = Some(val);
        }
        300 => {
          ::pb_jelly::helpers::deserialize_packed::<B, i32>(buf, typ, ::pb_jelly::wire_format::Type::Varint, "FakeMsg", 300, &mut self.repeated_primitive)?;
        }
        200 => {
          let val = ::pb_jelly::helpers::deserialize_length_delimited::<B, super::pbtest3::ForeignMessage3>(buf, typ, "FakeMsg", 200)?;
          self.repeated_message.push(val);
        }
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::Reflection for FakeMsg {
  fn which_one_of(&self, oneof_name: &str) -> ::std::option::Option<&'static str> {
    match oneof_name {
      _ => {
        panic!("unknown oneof name given");
      }
    }
  }
  fn get_field_mut(&mut self, field_name: &str) -> ::pb_jelly::reflection::FieldMut<'_> {
    match field_name {
      "base_field" => {
        ::pb_jelly::reflection::FieldMut::Value(self.base_field.get_or_insert_with(::std::default::Default::default))
      }
      "singular_primitive" => {
        ::pb_jelly::reflection::FieldMut::Value(self.singular_primitive.get_or_insert_with(::std::default::Default::default))
      }
      "singular_message" => {
        ::pb_jelly::reflection::FieldMut::Value(self.singular_message.get_or_insert_with(::std::default::Default::default))
      }
      "repeated_primitive" => {
        unimplemented!("Repeated fields are not currently supported.")
      }
      "repeated_message" => {
        unimplemented!("Repeated fields are not currently supported.")
      }
      _ => {
        panic!("unknown field name given")
      }
    }
  }
}

pub const SINGULAR_PRIMITIVE: ::pb_jelly::extensions::SingularExtension<Msg, i32> =
    ::pb_jelly::extensions::SingularExtension::new(
        101,
        ::pb_jelly::wire_format::Type::Varint,
        "singular_primitive",
    );

pub const SINGULAR_MESSAGE: ::pb_jelly::extensions::SingularExtension<Msg, super::pbtest3::ForeignMessage3> =
    ::pb_jelly::extensions::SingularExtension::new(
        301,
        ::pb_jelly::wire_format::Type::LengthDelimited,
        "singular_message",
    );

pub const REPEATED_PRIMITIVE: ::pb_jelly::extensions::RepeatedExtension<Msg, i32> =
    ::pb_jelly::extensions::RepeatedExtension::new(
        300,
        ::pb_jelly::wire_format::Type::Varint,
        "repeated_primitive",
    );

pub const REPEATED_MESSAGE: ::pb_jelly::extensions::RepeatedExtension<Msg, super::pbtest3::ForeignMessage3> =
    ::pb_jelly::extensions::RepeatedExtension::new(
        200,
        ::pb_jelly::wire_format::Type::LengthDelimited,
        "repeated_message",
    );

