// @generated, do not edit
#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct InpMessage {
  pub i: i32,
}
impl ::std::default::Default for InpMessage {
  fn default() -> Self {
    InpMessage {
      i: ::std::default::Default::default(),
    }
  }
}
::lazy_static::lazy_static! {
  pub static ref InpMessage_default: InpMessage = InpMessage::default();
}
impl ::pb_jelly::Message for InpMessage {
  fn descriptor(&self) -> ::std::option::Option<::pb_jelly::MessageDescriptor> {
    Some(::pb_jelly::MessageDescriptor {
      name: "InpMessage",
      full_name: "pbtest.InpMessage",
      fields: &[
        ::pb_jelly::FieldDescriptor {
          name: "i",
          full_name: "pbtest.InpMessage.i",
          index: 0,
          number: 1,
          typ: ::pb_jelly::wire_format::Type::Varint,
          label: ::pb_jelly::Label::Optional,
          oneof_index: None,
        },
      ],
      oneofs: &[
      ],
    })
  }
  fn compute_size(&self) -> usize {
    let mut size = 0;
    size += ::pb_jelly::helpers::compute_size_scalar::<i32>(&self.i, 1, ::pb_jelly::wire_format::Type::Varint);
    size
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    ::pb_jelly::helpers::serialize_scalar::<W, i32>(w, &self.i, 1, ::pb_jelly::wire_format::Type::Varint)?;
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        1 => {
          let val = ::pb_jelly::helpers::deserialize_known_length::<B, i32>(buf, typ, ::pb_jelly::wire_format::Type::Varint, "InpMessage", 1)?;
          self.i = val;
        }
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::Reflection for InpMessage {
  fn which_one_of(&self, oneof_name: &str) -> ::std::option::Option<&'static str> {
    match oneof_name {
      _ => {
        panic!("unknown oneof name given");
      }
    }
  }
  fn get_field_mut(&mut self, field_name: &str) -> ::pb_jelly::reflection::FieldMut<'_> {
    match field_name {
      "i" => {
        ::pb_jelly::reflection::FieldMut::Value(&mut self.i)
      }
      _ => {
        panic!("unknown field name given")
      }
    }
  }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct OutMessage {
  pub o: i32,
}
impl ::std::default::Default for OutMessage {
  fn default() -> Self {
    OutMessage {
      o: ::std::default::Default::default(),
    }
  }
}
::lazy_static::lazy_static! {
  pub static ref OutMessage_default: OutMessage = OutMessage::default();
}
impl ::pb_jelly::Message for OutMessage {
  fn descriptor(&self) -> ::std::option::Option<::pb_jelly::MessageDescriptor> {
    Some(::pb_jelly::MessageDescriptor {
      name: "OutMessage",
      full_name: "pbtest.OutMessage",
      fields: &[
        ::pb_jelly::FieldDescriptor {
          name: "o",
          full_name: "pbtest.OutMessage.o",
          index: 0,
          number: 1,
          typ: ::pb_jelly::wire_format::Type::Varint,
          label: ::pb_jelly::Label::Optional,
          oneof_index: None,
        },
      ],
      oneofs: &[
      ],
    })
  }
  fn compute_size(&self) -> usize {
    let mut size = 0;
    size += ::pb_jelly::helpers::compute_size_scalar::<i32>(&self.o, 1, ::pb_jelly::wire_format::Type::Varint);
    size
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    ::pb_jelly::helpers::serialize_scalar::<W, i32>(w, &self.o, 1, ::pb_jelly::wire_format::Type::Varint)?;
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        1 => {
          let val = ::pb_jelly::helpers::deserialize_known_length::<B, i32>(buf, typ, ::pb_jelly::wire_format::Type::Varint, "OutMessage", 1)?;
          self.o = val;
        }
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::Reflection for OutMessage {
  fn which_one_of(&self, oneof_name: &str) -> ::std::option::Option<&'static str> {
    match oneof_name {
      _ => {
        panic!("unknown oneof name given");
      }
    }
  }
  fn get_field_mut(&mut self, field_name: &str) -> ::pb_jelly::reflection::FieldMut<'_> {
    match field_name {
      "o" => {
        ::pb_jelly::reflection::FieldMut::Value(&mut self.o)
      }
      _ => {
        panic!("unknown field name given")
      }
    }
  }
}

