// @generated, do not edit
#[derive(Clone, Debug, PartialEq)]
pub struct BytesData {
  /// Using the `zero_copy` option, the `bytes` type maps to `pb::Lazy<bytes::Bytes>`
  pub data: ::std::option::Option<::pb_jelly::Lazy<::bytes::Bytes>>,
}
impl BytesData {
  pub fn has_data(&self) -> bool {
    self.data.is_some()
  }
  pub fn set_data(&mut self, v: ::pb_jelly::Lazy<::bytes::Bytes>) {
    self.data = Some(v);
  }
  pub fn take_data(&mut self) -> ::pb_jelly::Lazy<::bytes::Bytes> {
    self.data.take().unwrap_or_default()
  }
}
impl ::std::default::Default for BytesData {
  fn default() -> Self {
    BytesData {
      data: ::std::default::Default::default(),
    }
  }
}
lazy_static! {
  pub static ref BytesData_default: BytesData = BytesData::default();
}
impl ::pb_jelly::Message for BytesData {
  fn compute_size(&self) -> usize  {
    let mut size = 0;
    let mut data_size = 0;
    for val in &self.data {
      let l = ::pb_jelly::Message::compute_size(val);
      data_size += ::pb_jelly::wire_format::serialized_length(1);
      data_size += ::pb_jelly::varint::serialized_length(l as u64);
      data_size += l;
    }
    size += data_size;
    size
  }
  fn compute_grpc_slices_size(&self) -> usize  {
    let mut size = 0;
    for val in &self.data {
      size += ::pb_jelly::Message::compute_grpc_slices_size(val);
    }
    size
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    for val in &self.data {
      ::pb_jelly::wire_format::write(1, ::pb_jelly::wire_format::Type::LengthDelimited, w)?;
      let l = ::pb_jelly::Message::compute_size(val);
      ::pb_jelly::varint::write(l as u64, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        1 => {
          ::pb_jelly::ensure_wire_format(typ, ::pb_jelly::wire_format::Type::LengthDelimited, "BytesData", 1)?;
          let len = ::pb_jelly::varint::ensure_read(&mut buf)?;
          let mut next = ::pb_jelly::ensure_split(buf, len as usize)?;
          let mut val: ::pb_jelly::Lazy<::bytes::Bytes> = ::std::default::Default::default();
          ::pb_jelly::Message::deserialize(&mut val, &mut next)?;
          self.data = Some(val);
        }
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::MessageDescriptor for BytesData {
  const NAME: &'static str = "BytesData";
  const FULL_NAME: &'static str = "pbtest.BytesData";
}

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct VecData {
  /// By default, the `bytes` type maps to Vec<u8>
  pub data: ::std::option::Option<::std::vec::Vec<u8>>,
}
impl VecData {
  pub fn has_data(&self) -> bool {
    self.data.is_some()
  }
  pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
    self.data = Some(v);
  }
  pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
    self.data.take().unwrap_or_default()
  }
  pub fn get_data(&self) -> &[u8] {
    self.data.as_deref().unwrap_or(&[])
  }
}
impl ::std::default::Default for VecData {
  fn default() -> Self {
    VecData {
      data: ::std::default::Default::default(),
    }
  }
}
lazy_static! {
  pub static ref VecData_default: VecData = VecData::default();
}
impl ::pb_jelly::Message for VecData {
  fn compute_size(&self) -> usize  {
    let mut size = 0;
    let mut data_size = 0;
    for val in &self.data {
      let l = ::pb_jelly::Message::compute_size(val);
      data_size += ::pb_jelly::wire_format::serialized_length(1);
      data_size += ::pb_jelly::varint::serialized_length(l as u64);
      data_size += l;
    }
    size += data_size;
    size
  }
  fn compute_grpc_slices_size(&self) -> usize  {
    let mut size = 0;
    for val in &self.data {
      size += ::pb_jelly::Message::compute_grpc_slices_size(val);
    }
    size
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    for val in &self.data {
      ::pb_jelly::wire_format::write(1, ::pb_jelly::wire_format::Type::LengthDelimited, w)?;
      let l = ::pb_jelly::Message::compute_size(val);
      ::pb_jelly::varint::write(l as u64, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        1 => {
          ::pb_jelly::ensure_wire_format(typ, ::pb_jelly::wire_format::Type::LengthDelimited, "VecData", 1)?;
          let len = ::pb_jelly::varint::ensure_read(&mut buf)?;
          let mut next = ::pb_jelly::ensure_split(buf, len as usize)?;
          let mut val: ::std::vec::Vec<u8> = ::std::default::Default::default();
          ::pb_jelly::Message::deserialize(&mut val, &mut next)?;
          self.data = Some(val);
        }
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::MessageDescriptor for VecData {
  const NAME: &'static str = "VecData";
  const FULL_NAME: &'static str = "pbtest.VecData";
}

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct StringMessage {
  pub data: ::std::option::Option<::std::string::String>,
}
impl StringMessage {
  pub fn has_data(&self) -> bool {
    self.data.is_some()
  }
  pub fn set_data(&mut self, v: ::std::string::String) {
    self.data = Some(v);
  }
  pub fn take_data(&mut self) -> ::std::string::String {
    self.data.take().unwrap_or_default()
  }
  pub fn get_data(&self) -> &str {
    self.data.as_deref().unwrap_or("")
  }
}
impl ::std::default::Default for StringMessage {
  fn default() -> Self {
    StringMessage {
      data: ::std::default::Default::default(),
    }
  }
}
lazy_static! {
  pub static ref StringMessage_default: StringMessage = StringMessage::default();
}
impl ::pb_jelly::Message for StringMessage {
  fn compute_size(&self) -> usize  {
    let mut size = 0;
    let mut data_size = 0;
    for val in &self.data {
      let l = ::pb_jelly::Message::compute_size(val);
      data_size += ::pb_jelly::wire_format::serialized_length(1);
      data_size += ::pb_jelly::varint::serialized_length(l as u64);
      data_size += l;
    }
    size += data_size;
    size
  }
  fn compute_grpc_slices_size(&self) -> usize  {
    let mut size = 0;
    for val in &self.data {
      size += ::pb_jelly::Message::compute_grpc_slices_size(val);
    }
    size
  }
  fn serialize<W: ::pb_jelly::PbBufferWriter>(&self, w: &mut W) -> ::std::io::Result<()> {
    for val in &self.data {
      ::pb_jelly::wire_format::write(1, ::pb_jelly::wire_format::Type::LengthDelimited, w)?;
      let l = ::pb_jelly::Message::compute_size(val);
      ::pb_jelly::varint::write(l as u64, w)?;
      ::pb_jelly::Message::serialize(val, w)?;
    }
    Ok(())
  }
  fn deserialize<B: ::pb_jelly::PbBufferReader>(&mut self, mut buf: &mut B) -> ::std::io::Result<()> {
    while let Some((field_number, typ)) = ::pb_jelly::wire_format::read(&mut buf)? {
      match field_number {
        1 => {
          ::pb_jelly::ensure_wire_format(typ, ::pb_jelly::wire_format::Type::LengthDelimited, "StringMessage", 1)?;
          let len = ::pb_jelly::varint::ensure_read(&mut buf)?;
          let mut next = ::pb_jelly::ensure_split(buf, len as usize)?;
          let mut val: ::std::string::String = ::std::default::Default::default();
          ::pb_jelly::Message::deserialize(&mut val, &mut next)?;
          self.data = Some(val);
        }
        _ => {
          ::pb_jelly::skip(typ, &mut buf)?;
        }
      }
    }
    Ok(())
  }
}
impl ::pb_jelly::MessageDescriptor for StringMessage {
  const NAME: &'static str = "StringMessage";
  const FULL_NAME: &'static str = "pbtest.StringMessage";
}

