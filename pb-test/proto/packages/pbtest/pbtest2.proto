syntax="proto2";

import "google/protobuf/empty.proto";
import "rust/extensions.proto";

package pbtest;

// Test message names which collide with rust primitive names
message Option {}
message Vec {}
message Default {}
message String {}

message Version0OneOfNoneNullable {
    oneof test_oneof {
        option (rust.nullable) = false;
        string string_one_of = 1;
    }
}

message Version1OneOfNoneNullable {
    oneof test_oneof {
        option (rust.nullable) = false;
        string string_one_of = 1;
        string string_two_of = 2;
    }
}

message Version2OneOfNoneNullable {
    oneof test_oneof {
        option (rust.nullable) = false;
        string string_one_of = 1;
        string string_two_of = 2;
        int32 int_one_Of = 3;
    }
}

message Version1Enum {
    enum TestEnum {
        ENUM0 = 0;
    }
    optional TestEnum enum_field = 1;
}

message Version2Enum {
    enum TestEnum {
        ENUM0 = 0;
        ENUM1 = 1;
    }
    optional TestEnum enum_field = 1;
}

message Version1OneOf {
    oneof test_oneof {
        string string_one_of = 1;
    }
}

message Version2OneOf {
    oneof test_oneof {
        string string_one_of = 1;
        int32 int_one_of = 2;
    }
}

message Version1 {
    required string required_string = 1;
}

message Version2 {
    required string required_string      = 1;
    optional    int32 optional_int32     = 2;
    optional    int64 optional_int64     = 3;
    optional   uint32 optional_uint32    = 4;
    optional   uint64 optional_uint64    = 5;
    optional  fixed64 optional_fixed64   = 6;
    optional  fixed32 optional_fixed32   = 7;
    optional sfixed64 optional_sfixed64  = 8;
    optional sfixed32 optional_sfixed32  = 9;
    optional   double optional_double    = 10;
    optional     bool optional_bool      = 11;
    optional   string optional_string    = 12;
    optional    bytes optional_bytes     = 13;
    optional    float optional_float     = 14;
}

message ForeignMessage {
 optional int32 c = 1;
}

enum ForeignEnum {
 FOREIGN_FOO = 0;
 FOREIGN_BAR = 1;
 FOREIGN_BAZ = 2;
}

message TestMessage {
 enum NestedEnum {
  FOO = 0;
  BAR = 1;
  BAZ = 2;
  NEG = -1;  // Intentionally negative.
 }

 optional    int32 optional_int32     = 1;
 optional    int64 optional_int64     = 2;
 optional   uint32 optional_uint32    = 3;
 optional   uint64 optional_uint64    = 4;
 optional  fixed64 optional_fixed64   = 8;
 optional  fixed32 optional_fixed32   = 9;
 optional sfixed64 optional_sfixed64  = 10;
 optional sfixed32 optional_sfixed32  = 11;
 optional   double optional_double    = 12;
 optional     bool optional_bool      = 13;
 optional   string optional_string    = 14;
 optional    bytes optional_bytes     = 15;
 optional    float optional_float     = 16;

 optional ForeignMessage optional_foreign_message = 19;

 optional NestedEnum     optional_nested_enum     = 21;
 optional ForeignEnum    optional_foreign_enum    = 22;

 repeated    int32 repeated_int32    = 31;
 repeated    int64 repeated_int64    = 32;
 repeated   uint32 repeated_uint32   = 33;
 repeated   uint64 repeated_uint64   = 34;
 repeated  fixed64 repeated_fixed64  = 38;
 repeated  fixed32 repeated_fixed32  = 39;
 repeated sfixed64 repeated_sfixed64 = 40;
 repeated sfixed32 repeated_sfixed32 = 41;
 repeated   double repeated_double   = 42;
 repeated     bool repeated_bool     = 43;
 repeated   string repeated_string   = 44;
 repeated    bytes repeated_bytes    = 45;
 repeated    float repeated_float    = 46;

 repeated ForeignMessage repeated_foreign_message = 49;

 repeated NestedEnum     repeated_nested_enum     = 51;
 repeated ForeignEnum    repeated_foreign_enum    = 52;

 optional ForeignMessage optional_foreign_message_boxed = 53 [(rust.box_it)=true];
 optional ForeignMessage optional_foreign_message_nonnullable = 54 [(rust.nullable_field) = false];

 oneof oneof_int {
   int32 int1 = 57;
   ForeignMessage foreign1 = 58;
 }
 oneof oneof_foreign {
   int32 int2 = 59;
   ForeignMessage foreign2 = 60;
 }
 oneof oneof_zero {
   int32 int3 = 61;
   ForeignMessage foreign3 = 62;
 }
 oneof oneof_null {
   int32 int4 = 63;
   ForeignMessage foreign4 = 64;
 }
 oneof oneof_unset {
   int32 int5 = 65;
   ForeignMessage foreign5 = 66;
 }
 oneof oneof_primitives {
   int32 int6 = 67;
   bool bool6 = 68;
 }
 // Generate a rust enum like this:
 // Enum { a, b, c(int32) }
 oneof oneof_empty_field {
   option (rust.nullable) = false;
   google.protobuf.Empty a = 70;
   google.protobuf.Empty b = 71;
   int32 c = 72;
 }

 // Use some rust reserved keywords
 optional bool type = 73;
 oneof mod {
   int32 loop = 74;
   int32 unsafe = 75;
 }
}
