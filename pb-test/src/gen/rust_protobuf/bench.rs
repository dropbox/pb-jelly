// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 25.2
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pbtest/bench.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:pbtest.BytesData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BytesData {
    // message fields
    // @@protoc_insertion_point(field:pbtest.BytesData.data)
    pub data: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.BytesData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BytesData {
    fn default() -> &'a BytesData {
        <BytesData as ::protobuf::Message>::default_instance()
    }
}

impl BytesData {
    pub fn new() -> BytesData {
        ::std::default::Default::default()
    }

    // optional bytes data = 1;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::bytes::Bytes) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::bytes::Bytes {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::bytes::Bytes {
        self.data.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &BytesData| { &m.data },
            |m: &mut BytesData| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BytesData>(
            "BytesData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BytesData {
    const NAME: &'static str = "BytesData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BytesData {
        BytesData::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BytesData {
        static instance: BytesData = BytesData {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BytesData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BytesData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BytesData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BytesData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbtest.VecData)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct VecData {
    // message fields
    // @@protoc_insertion_point(field:pbtest.VecData.data)
    pub data: ::std::option::Option<::bytes::Bytes>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.VecData.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a VecData {
    fn default() -> &'a VecData {
        <VecData as ::protobuf::Message>::default_instance()
    }
}

impl VecData {
    pub fn new() -> VecData {
        ::std::default::Default::default()
    }

    // optional bytes data = 1;

    pub fn data(&self) -> &[u8] {
        match self.data.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::bytes::Bytes) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::bytes::Bytes {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::bytes::Bytes::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::bytes::Bytes {
        self.data.take().unwrap_or_else(|| ::bytes::Bytes::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &VecData| { &m.data },
            |m: &mut VecData| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<VecData>(
            "VecData",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for VecData {
    const NAME: &'static str = "VecData";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(is.read_tokio_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> VecData {
        VecData::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static VecData {
        static instance: VecData = VecData {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for VecData {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("VecData").unwrap()).clone()
    }
}

impl ::std::fmt::Display for VecData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VecData {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbtest.StringMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StringMessage {
    // message fields
    // @@protoc_insertion_point(field:pbtest.StringMessage.data)
    pub data: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.StringMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StringMessage {
    fn default() -> &'a StringMessage {
        <StringMessage as ::protobuf::Message>::default_instance()
    }
}

impl StringMessage {
    pub fn new() -> StringMessage {
        ::std::default::Default::default()
    }

    // optional string data = 1;

    pub fn data(&self) -> &str {
        match self.data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        self.data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &StringMessage| { &m.data },
            |m: &mut StringMessage| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringMessage>(
            "StringMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StringMessage {
    const NAME: &'static str = "StringMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StringMessage {
        StringMessage::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StringMessage {
        static instance: StringMessage = StringMessage {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StringMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StringMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StringMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbtest.StringMessageSSO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct StringMessageSSO {
    // message fields
    // @@protoc_insertion_point(field:pbtest.StringMessageSSO.data)
    pub data: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.StringMessageSSO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StringMessageSSO {
    fn default() -> &'a StringMessageSSO {
        <StringMessageSSO as ::protobuf::Message>::default_instance()
    }
}

impl StringMessageSSO {
    pub fn new() -> StringMessageSSO {
        ::std::default::Default::default()
    }

    // optional string data = 1;

    pub fn data(&self) -> &str {
        match self.data.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        if self.data.is_none() {
            self.data = ::std::option::Option::Some(::std::string::String::new());
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        self.data.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data",
            |m: &StringMessageSSO| { &m.data },
            |m: &mut StringMessageSSO| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StringMessageSSO>(
            "StringMessageSSO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StringMessageSSO {
    const NAME: &'static str = "StringMessageSSO";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.data = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.data.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.data.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StringMessageSSO {
        StringMessageSSO::new()
    }

    fn clear(&mut self) {
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StringMessageSSO {
        static instance: StringMessageSSO = StringMessageSSO {
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StringMessageSSO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StringMessageSSO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StringMessageSSO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringMessageSSO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbtest.Cities)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Cities {
    // message fields
    // @@protoc_insertion_point(field:pbtest.Cities.cities)
    pub cities: ::std::vec::Vec<City>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.Cities.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Cities {
    fn default() -> &'a Cities {
        <Cities as ::protobuf::Message>::default_instance()
    }
}

impl Cities {
    pub fn new() -> Cities {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cities",
            |m: &Cities| { &m.cities },
            |m: &mut Cities| { &mut m.cities },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Cities>(
            "Cities",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Cities {
    const NAME: &'static str = "Cities";

    fn is_initialized(&self) -> bool {
        for v in &self.cities {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cities.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.cities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.cities {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Cities {
        Cities::new()
    }

    fn clear(&mut self) {
        self.cities.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Cities {
        static instance: Cities = Cities {
            cities: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Cities {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Cities").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Cities {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cities {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbtest.City)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct City {
    // message fields
    // @@protoc_insertion_point(field:pbtest.City.city)
    pub city: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.City.growth_from_2000_to_2013)
    pub growth_from_2000_to_2013: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.City.latitude)
    pub latitude: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:pbtest.City.longitude)
    pub longitude: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:pbtest.City.population)
    pub population: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.City.rank)
    pub rank: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.City.state)
    pub state: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.City.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a City {
    fn default() -> &'a City {
        <City as ::protobuf::Message>::default_instance()
    }
}

impl City {
    pub fn new() -> City {
        ::std::default::Default::default()
    }

    // required string city = 1;

    pub fn city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_city(&mut self) {
        self.city = ::std::option::Option::None;
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city = ::std::option::Option::Some(::std::string::String::new());
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string growth_from_2000_to_2013 = 2;

    pub fn growth_from_2000_to_2013(&self) -> &str {
        match self.growth_from_2000_to_2013.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_growth_from_2000_to_2013(&mut self) {
        self.growth_from_2000_to_2013 = ::std::option::Option::None;
    }

    pub fn has_growth_from_2000_to_2013(&self) -> bool {
        self.growth_from_2000_to_2013.is_some()
    }

    // Param is passed by value, moved
    pub fn set_growth_from_2000_to_2013(&mut self, v: ::std::string::String) {
        self.growth_from_2000_to_2013 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_growth_from_2000_to_2013(&mut self) -> &mut ::std::string::String {
        if self.growth_from_2000_to_2013.is_none() {
            self.growth_from_2000_to_2013 = ::std::option::Option::Some(::std::string::String::new());
        }
        self.growth_from_2000_to_2013.as_mut().unwrap()
    }

    // Take field
    pub fn take_growth_from_2000_to_2013(&mut self) -> ::std::string::String {
        self.growth_from_2000_to_2013.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required double latitude = 3;

    pub fn latitude(&self) -> f64 {
        self.latitude.unwrap_or(0.)
    }

    pub fn clear_latitude(&mut self) {
        self.latitude = ::std::option::Option::None;
    }

    pub fn has_latitude(&self) -> bool {
        self.latitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f64) {
        self.latitude = ::std::option::Option::Some(v);
    }

    // required double longitude = 4;

    pub fn longitude(&self) -> f64 {
        self.longitude.unwrap_or(0.)
    }

    pub fn clear_longitude(&mut self) {
        self.longitude = ::std::option::Option::None;
    }

    pub fn has_longitude(&self) -> bool {
        self.longitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f64) {
        self.longitude = ::std::option::Option::Some(v);
    }

    // required string population = 5;

    pub fn population(&self) -> &str {
        match self.population.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_population(&mut self) {
        self.population = ::std::option::Option::None;
    }

    pub fn has_population(&self) -> bool {
        self.population.is_some()
    }

    // Param is passed by value, moved
    pub fn set_population(&mut self, v: ::std::string::String) {
        self.population = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_population(&mut self) -> &mut ::std::string::String {
        if self.population.is_none() {
            self.population = ::std::option::Option::Some(::std::string::String::new());
        }
        self.population.as_mut().unwrap()
    }

    // Take field
    pub fn take_population(&mut self) -> ::std::string::String {
        self.population.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string rank = 6;

    pub fn rank(&self) -> &str {
        match self.rank.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rank(&mut self) {
        self.rank = ::std::option::Option::None;
    }

    pub fn has_rank(&self) -> bool {
        self.rank.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rank(&mut self, v: ::std::string::String) {
        self.rank = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rank(&mut self) -> &mut ::std::string::String {
        if self.rank.is_none() {
            self.rank = ::std::option::Option::Some(::std::string::String::new());
        }
        self.rank.as_mut().unwrap()
    }

    // Take field
    pub fn take_rank(&mut self) -> ::std::string::String {
        self.rank.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string state = 7;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "city",
            |m: &City| { &m.city },
            |m: &mut City| { &mut m.city },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "growth_from_2000_to_2013",
            |m: &City| { &m.growth_from_2000_to_2013 },
            |m: &mut City| { &mut m.growth_from_2000_to_2013 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "latitude",
            |m: &City| { &m.latitude },
            |m: &mut City| { &mut m.latitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "longitude",
            |m: &City| { &m.longitude },
            |m: &mut City| { &mut m.longitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "population",
            |m: &City| { &m.population },
            |m: &mut City| { &mut m.population },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rank",
            |m: &City| { &m.rank },
            |m: &mut City| { &mut m.rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &City| { &m.state },
            |m: &mut City| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<City>(
            "City",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for City {
    const NAME: &'static str = "City";

    fn is_initialized(&self) -> bool {
        if self.city.is_none() {
            return false;
        }
        if self.growth_from_2000_to_2013.is_none() {
            return false;
        }
        if self.latitude.is_none() {
            return false;
        }
        if self.longitude.is_none() {
            return false;
        }
        if self.population.is_none() {
            return false;
        }
        if self.rank.is_none() {
            return false;
        }
        if self.state.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.city = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.growth_from_2000_to_2013 = ::std::option::Option::Some(is.read_string()?);
                },
                25 => {
                    self.latitude = ::std::option::Option::Some(is.read_double()?);
                },
                33 => {
                    self.longitude = ::std::option::Option::Some(is.read_double()?);
                },
                42 => {
                    self.population = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.rank = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.city.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.growth_from_2000_to_2013.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.latitude {
            my_size += 1 + 8;
        }
        if let Some(v) = self.longitude {
            my_size += 1 + 8;
        }
        if let Some(v) = self.population.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.rank.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.city.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.growth_from_2000_to_2013.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.latitude {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.longitude {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.population.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.rank.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> City {
        City::new()
    }

    fn clear(&mut self) {
        self.city = ::std::option::Option::None;
        self.growth_from_2000_to_2013 = ::std::option::Option::None;
        self.latitude = ::std::option::Option::None;
        self.longitude = ::std::option::Option::None;
        self.population = ::std::option::Option::None;
        self.rank = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static City {
        static instance: City = City {
            city: ::std::option::Option::None,
            growth_from_2000_to_2013: ::std::option::Option::None,
            latitude: ::std::option::Option::None,
            longitude: ::std::option::Option::None,
            population: ::std::option::Option::None,
            rank: ::std::option::Option::None,
            state: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for City {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("City").unwrap()).clone()
    }
}

impl ::std::fmt::Display for City {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for City {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbtest.CitiesSSO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CitiesSSO {
    // message fields
    // @@protoc_insertion_point(field:pbtest.CitiesSSO.cities)
    pub cities: ::std::vec::Vec<CitySSO>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.CitiesSSO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CitiesSSO {
    fn default() -> &'a CitiesSSO {
        <CitiesSSO as ::protobuf::Message>::default_instance()
    }
}

impl CitiesSSO {
    pub fn new() -> CitiesSSO {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "cities",
            |m: &CitiesSSO| { &m.cities },
            |m: &mut CitiesSSO| { &mut m.cities },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CitiesSSO>(
            "CitiesSSO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CitiesSSO {
    const NAME: &'static str = "CitiesSSO";

    fn is_initialized(&self) -> bool {
        for v in &self.cities {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.cities.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.cities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.cities {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CitiesSSO {
        CitiesSSO::new()
    }

    fn clear(&mut self) {
        self.cities.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CitiesSSO {
        static instance: CitiesSSO = CitiesSSO {
            cities: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CitiesSSO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CitiesSSO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CitiesSSO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CitiesSSO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:pbtest.CitySSO)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct CitySSO {
    // message fields
    // @@protoc_insertion_point(field:pbtest.CitySSO.city)
    pub city: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.CitySSO.growth_from_2000_to_2013)
    pub growth_from_2000_to_2013: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.CitySSO.latitude)
    pub latitude: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:pbtest.CitySSO.longitude)
    pub longitude: ::std::option::Option<f64>,
    // @@protoc_insertion_point(field:pbtest.CitySSO.population)
    pub population: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.CitySSO.rank)
    pub rank: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:pbtest.CitySSO.state)
    pub state: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:pbtest.CitySSO.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CitySSO {
    fn default() -> &'a CitySSO {
        <CitySSO as ::protobuf::Message>::default_instance()
    }
}

impl CitySSO {
    pub fn new() -> CitySSO {
        ::std::default::Default::default()
    }

    // required string city = 1;

    pub fn city(&self) -> &str {
        match self.city.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_city(&mut self) {
        self.city = ::std::option::Option::None;
    }

    pub fn has_city(&self) -> bool {
        self.city.is_some()
    }

    // Param is passed by value, moved
    pub fn set_city(&mut self, v: ::std::string::String) {
        self.city = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_city(&mut self) -> &mut ::std::string::String {
        if self.city.is_none() {
            self.city = ::std::option::Option::Some(::std::string::String::new());
        }
        self.city.as_mut().unwrap()
    }

    // Take field
    pub fn take_city(&mut self) -> ::std::string::String {
        self.city.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string growth_from_2000_to_2013 = 2;

    pub fn growth_from_2000_to_2013(&self) -> &str {
        match self.growth_from_2000_to_2013.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_growth_from_2000_to_2013(&mut self) {
        self.growth_from_2000_to_2013 = ::std::option::Option::None;
    }

    pub fn has_growth_from_2000_to_2013(&self) -> bool {
        self.growth_from_2000_to_2013.is_some()
    }

    // Param is passed by value, moved
    pub fn set_growth_from_2000_to_2013(&mut self, v: ::std::string::String) {
        self.growth_from_2000_to_2013 = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_growth_from_2000_to_2013(&mut self) -> &mut ::std::string::String {
        if self.growth_from_2000_to_2013.is_none() {
            self.growth_from_2000_to_2013 = ::std::option::Option::Some(::std::string::String::new());
        }
        self.growth_from_2000_to_2013.as_mut().unwrap()
    }

    // Take field
    pub fn take_growth_from_2000_to_2013(&mut self) -> ::std::string::String {
        self.growth_from_2000_to_2013.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required double latitude = 3;

    pub fn latitude(&self) -> f64 {
        self.latitude.unwrap_or(0.)
    }

    pub fn clear_latitude(&mut self) {
        self.latitude = ::std::option::Option::None;
    }

    pub fn has_latitude(&self) -> bool {
        self.latitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: f64) {
        self.latitude = ::std::option::Option::Some(v);
    }

    // required double longitude = 4;

    pub fn longitude(&self) -> f64 {
        self.longitude.unwrap_or(0.)
    }

    pub fn clear_longitude(&mut self) {
        self.longitude = ::std::option::Option::None;
    }

    pub fn has_longitude(&self) -> bool {
        self.longitude.is_some()
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: f64) {
        self.longitude = ::std::option::Option::Some(v);
    }

    // required string population = 5;

    pub fn population(&self) -> &str {
        match self.population.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_population(&mut self) {
        self.population = ::std::option::Option::None;
    }

    pub fn has_population(&self) -> bool {
        self.population.is_some()
    }

    // Param is passed by value, moved
    pub fn set_population(&mut self, v: ::std::string::String) {
        self.population = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_population(&mut self) -> &mut ::std::string::String {
        if self.population.is_none() {
            self.population = ::std::option::Option::Some(::std::string::String::new());
        }
        self.population.as_mut().unwrap()
    }

    // Take field
    pub fn take_population(&mut self) -> ::std::string::String {
        self.population.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string rank = 6;

    pub fn rank(&self) -> &str {
        match self.rank.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_rank(&mut self) {
        self.rank = ::std::option::Option::None;
    }

    pub fn has_rank(&self) -> bool {
        self.rank.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rank(&mut self, v: ::std::string::String) {
        self.rank = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rank(&mut self) -> &mut ::std::string::String {
        if self.rank.is_none() {
            self.rank = ::std::option::Option::Some(::std::string::String::new());
        }
        self.rank.as_mut().unwrap()
    }

    // Take field
    pub fn take_rank(&mut self) -> ::std::string::String {
        self.rank.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string state = 7;

    pub fn state(&self) -> &str {
        match self.state.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_state(&mut self) {
        self.state = ::std::option::Option::None;
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ::std::string::String) {
        self.state = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut ::std::string::String {
        if self.state.is_none() {
            self.state = ::std::option::Option::Some(::std::string::String::new());
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> ::std::string::String {
        self.state.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "city",
            |m: &CitySSO| { &m.city },
            |m: &mut CitySSO| { &mut m.city },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "growth_from_2000_to_2013",
            |m: &CitySSO| { &m.growth_from_2000_to_2013 },
            |m: &mut CitySSO| { &mut m.growth_from_2000_to_2013 },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "latitude",
            |m: &CitySSO| { &m.latitude },
            |m: &mut CitySSO| { &mut m.latitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "longitude",
            |m: &CitySSO| { &m.longitude },
            |m: &mut CitySSO| { &mut m.longitude },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "population",
            |m: &CitySSO| { &m.population },
            |m: &mut CitySSO| { &mut m.population },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "rank",
            |m: &CitySSO| { &m.rank },
            |m: &mut CitySSO| { &mut m.rank },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "state",
            |m: &CitySSO| { &m.state },
            |m: &mut CitySSO| { &mut m.state },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CitySSO>(
            "CitySSO",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CitySSO {
    const NAME: &'static str = "CitySSO";

    fn is_initialized(&self) -> bool {
        if self.city.is_none() {
            return false;
        }
        if self.growth_from_2000_to_2013.is_none() {
            return false;
        }
        if self.latitude.is_none() {
            return false;
        }
        if self.longitude.is_none() {
            return false;
        }
        if self.population.is_none() {
            return false;
        }
        if self.rank.is_none() {
            return false;
        }
        if self.state.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.city = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.growth_from_2000_to_2013 = ::std::option::Option::Some(is.read_string()?);
                },
                25 => {
                    self.latitude = ::std::option::Option::Some(is.read_double()?);
                },
                33 => {
                    self.longitude = ::std::option::Option::Some(is.read_double()?);
                },
                42 => {
                    self.population = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.rank = ::std::option::Option::Some(is.read_string()?);
                },
                58 => {
                    self.state = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.city.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.growth_from_2000_to_2013.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.latitude {
            my_size += 1 + 8;
        }
        if let Some(v) = self.longitude {
            my_size += 1 + 8;
        }
        if let Some(v) = self.population.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.rank.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.state.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.city.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.growth_from_2000_to_2013.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.latitude {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.longitude {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.population.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.rank.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.state.as_ref() {
            os.write_string(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CitySSO {
        CitySSO::new()
    }

    fn clear(&mut self) {
        self.city = ::std::option::Option::None;
        self.growth_from_2000_to_2013 = ::std::option::Option::None;
        self.latitude = ::std::option::Option::None;
        self.longitude = ::std::option::Option::None;
        self.population = ::std::option::Option::None;
        self.rank = ::std::option::Option::None;
        self.state = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CitySSO {
        static instance: CitySSO = CitySSO {
            city: ::std::option::Option::None,
            growth_from_2000_to_2013: ::std::option::Option::None,
            latitude: ::std::option::Option::None,
            longitude: ::std::option::Option::None,
            population: ::std::option::Option::None,
            rank: ::std::option::Option::None,
            state: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CitySSO {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CitySSO").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CitySSO {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CitySSO {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12pbtest/bench.proto\x12\x06pbtest\x1a\x15rust/extensions.proto\"%\n\
    \tBytesData\x12\x18\n\x04data\x18\x01\x20\x01(\x0cR\x04dataB\x04\xb8\xb5\
    \x18\x01\"\x1d\n\x07VecData\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04d\
    ata\"#\n\rStringMessage\x12\x12\n\x04data\x18\x01\x20\x01(\tR\x04data\",\
    \n\x10StringMessageSSO\x12\x18\n\x04data\x18\x01\x20\x01(\tR\x04dataB\
    \x04\xc8\xb5\x18\x01\".\n\x06Cities\x12$\n\x06cities\x18\x01\x20\x03(\
    \x0b2\x0c.pbtest.CityR\x06cities\"\xd6\x01\n\x04City\x12\x12\n\x04city\
    \x18\x01\x20\x02(\tR\x04city\x126\n\x18growth_from_2000_to_2013\x18\x02\
    \x20\x02(\tR\x14growthFrom2000To2013\x12\x1a\n\x08latitude\x18\x03\x20\
    \x02(\x01R\x08latitude\x12\x1c\n\tlongitude\x18\x04\x20\x02(\x01R\tlongi\
    tude\x12\x1e\n\npopulation\x18\x05\x20\x02(\tR\npopulation\x12\x12\n\x04\
    rank\x18\x06\x20\x02(\tR\x04rank\x12\x14\n\x05state\x18\x07\x20\x02(\tR\
    \x05state\"4\n\tCitiesSSO\x12'\n\x06cities\x18\x01\x20\x03(\x0b2\x0f.pbt\
    est.CitySSOR\x06cities\"\xf7\x01\n\x07CitySSO\x12\x18\n\x04city\x18\x01\
    \x20\x02(\tR\x04cityB\x04\xc8\xb5\x18\x01\x12<\n\x18growth_from_2000_to_\
    2013\x18\x02\x20\x02(\tR\x14growthFrom2000To2013B\x04\xc8\xb5\x18\x01\
    \x12\x1a\n\x08latitude\x18\x03\x20\x02(\x01R\x08latitude\x12\x1c\n\tlong\
    itude\x18\x04\x20\x02(\x01R\tlongitude\x12$\n\npopulation\x18\x05\x20\
    \x02(\tR\npopulationB\x04\xc8\xb5\x18\x01\x12\x18\n\x04rank\x18\x06\x20\
    \x02(\tR\x04rankB\x04\xc8\xb5\x18\x01\x12\x1a\n\x05state\x18\x07\x20\x02\
    (\tR\x05stateB\x04\xc8\xb5\x18\x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::extensions::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(BytesData::generated_message_descriptor_data());
            messages.push(VecData::generated_message_descriptor_data());
            messages.push(StringMessage::generated_message_descriptor_data());
            messages.push(StringMessageSSO::generated_message_descriptor_data());
            messages.push(Cities::generated_message_descriptor_data());
            messages.push(City::generated_message_descriptor_data());
            messages.push(CitiesSSO::generated_message_descriptor_data());
            messages.push(CitySSO::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
